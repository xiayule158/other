安装mmdetection
1. 创建一个conda虚拟环境并激活它
conda create -n open-mmlab python=3.7 -y
conda activate open-mmlab
2. 按照官方说明安装PyTorch和Torchvision，例如：
pip install torch-1.5.0+cu101-cp37-cp37m-linux_x86_64.whl (先下载下来)
pip install torchvision==0.6.0
3. 克隆mmdetection存储库
git clone https://github.com/open-mmlab/mmdetection.git
cd mmdetection
4. 安装mmdetection（其他依赖库将自动安装）
conda install nccl -y（很重要,否则编译之后不能使用cuda）
conda install ninja -y
pip install mmcv
pip install "git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI"
可以先讲cocoapi git 下来：
cd cocoapi/PythonAPI/
optirun python setup.py develop
5.安装mmdetection
cd ../../
optirun python setup.py develop  # or "pip install -v -e ."
mkdir data
6.测试
cd demo
optirun python image_demo.py  jiaotong.jpeg ../configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py ../checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth

cd ../
复制数据集到data/coco中
optirun python tools/test.py configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth --show

7.修改 /home/xiayule/anaconda3/envs/open-mmlab/lib/python3.7/site-packages/mmcv/visualization/image.py line 20,使之能扩大窗口显示
cv2.namedWindow(win_name, cv2.WINDOW_NORMAL)
cv2.imshow(win_name, imread(img))

ln -s $COCO_ROOT data

cd ../
optirun python tools/test.py configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py /checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth --show

# optirun python image_demo.py  demo.jpg ../configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py ../checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth  --device=cpu


from mmdet.apis import inference_detector, init_detector, show_result_pyplot
def main():
    img_path = 'jiaotong.jpeg'
    config_path = '../configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py'
    checkpoint_path = '../checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'
    device = 'cuda:0'
    score_thr = 0.3

    # build the model from a config file and a checkpoint file
    model = init_detector(config_path, checkpoint_path, device=device)
    # test a single image
    result = inference_detector(model, img_path)
    # show the results
    show_result_pyplot(model, img_path, result, score_thr=score_thr)


if __name__ == '__main__':
    main()
    #  optirun python test.py
